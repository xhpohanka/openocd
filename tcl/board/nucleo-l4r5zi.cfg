# This is a STM32L4R5ZI nucleo board with a single STM32L4R5ZIT6 chip.
# http://www.st.com/en/evaluation-tools/nucleo-l4r5zi.html
#
# Two Winbond W25Q128FV attached, dual-1-line or dual-4-line mode
#

# This is for using the onboard STLINK
source [find interface/stlink.cfg]

transport select hla_swd

# increase working area to 96KB
set WORKAREASIZE 0x18000

if {![info exists OCTOSPI2]} {
	set OCTOSPI2 1
}

source [find target/stm32l4x.cfg]

# OCTOSPI initialization
# qpi: 4-line mode
proc octospi_init { qpi } {
	global a b
	mmw 0x4002104C 0x001001FF 0				;# RCC_AHB2ENR |= OSPIMEN, GPIOA-GPIOI (enable clocks)
	mmw 0x40021050 0x00000300 0				;# RCC_AHB3ENR |= OSPI2EN, OSPI1EN (enable clocks)
	mmw 0x40021058 0x10000000 0				;# RCC_APB1ENR1 |= PWREN (enable clock)
	sleep 1									;# Wait for clock startup

	mmw 0x40007004 0x00000200 0				;# PWR_CR2 |= IOSV (required for use of GPOIG, cf. RM0432)

	# PA02: P1_NCS, PE11: P1_NCS, PE10: P1_CLK, PE15: P1_IO3, PE14: P1_IO2, PE13: P1_IO1, PE12: P1_IO0
	# PC04: P1_IO7, PC03: P1_IO6, PC02: P1_IO5, PC01: P1_IO4

	# PA02:AF10:V, PC04:AF10:V, PC03:AF10:V, PC02:AF10:V, PC01:AF10:V, PE15:AF10:V
	# PE14:AF10:V, PE13:AF10:V, PE12:AF10:V, PE10:AF10:V

	# Port A: PA02:AF10:V
	mmw 0x48000000 0x00000020 0x00000010    ;# MODER
	mmw 0x48000008 0x00000030 0x00000000    ;# OSPEEDR
	mmw 0x4800000C 0x00000010 0x00000020    ;# PUPDR
	mmw 0x48000020 0x00000A00 0x00000500    ;# AFRL

	# Port C: PC04:AF10:V, PC03:AF10:V, PC02:AF10:V, PC01:AF10:V
	mmw 0x48000800 0x000002A8 0x00000154    ;# MODER
	mmw 0x48000808 0x000003FC 0x00000000    ;# OSPEEDR
	mmw 0x48000820 0x000AAAA0 0x00055550    ;# AFRL

	# Port E: PE15:AF10:V, PE14:AF10:V, PE13:AF10:V, PE12:AF10:V, PE11:AF10:V, PE10:AF10:V
	mmw 0x48001000 0xAA200000 0x55D00000    ;# MODER
	mmw 0x48001008 0xFFF00000 0x00000000    ;# OSPEEDR
	mmw 0x4800100C 0x00400000 0x00800000    ;# PUPDR
	mmw 0x48001024 0xAAAAAA00 0x55555500    ;# AFRH

	# This setting is for using OCTOSPI2 only, for OCTOSPI1 switch ports here:
	mww 0x50061C04 0x07050303				;# OCTOSPIM_P1CR: Port 1 (initialized above) mapped to OCTOSPI2
	mww 0x50061C08 0x03010101				;# OCTOSPIM_P2CR: Port 2 (not initalized) mapped to OCTOSPI1

	# correct FSIZE is 0x18, however, this causes trouble when
	# reading the last word at end of bank in *memory mapped* mode

	# OCTOSPI1: memory-mapped read mode with 3-byte addresses
	mww 0xA0001130 0x00001000				;# OCTOSPI_LPTR: deactivate CS after 4096 clocks when FIFO is full
	mww 0xA0001000 0x00400048				;# OCTOSPI_CR: FMODE=0x0, APMS=1, FTHRES=0, FSEL=0, DQM=1, TCEN=1
	mww 0xA0001008 0x00180100				;# OCTOSPI_DCR1: MTYP=0x0, FSIZE=0x18, CSHT=0x01, CKMODE=0
	mww 0xA000100C 0x00000001				;# OCTOSPI_DCR2: PRESCALER=1
	mww 0xA0001108 0x00000000				;# OCTOSPI_TCR: SSHIFT=0, DCYC=0x0
	mmw 0xA0001000 0x00000001 0				;# OCTOSPI_CR: EN=1

	# OCTOSPI2: memory-mapped read mode with 3-byte addresses
	mww 0xA0001530 0x00001000				;# OCTOSPI_LPTR: deactivate CS after 4096 clocks when FIFO is full
	mww 0xA0001400 0x00400048				;# OCTOSPI_CR: FMODE=0x0, APMS=1, FTHRES=0, FSEL=0, DQM=1, TCEN=1
	mww 0xA0001408 0x00180100				;# OCTOSPI_DCR1: MTYP=0x0, FSIZE=0x18, CSHT=0x01, CKMODE=0
	mww 0xA000140C 0x00000001				;# OCTOSPI_DCR2: PRESCALER=1
	mww 0xA0001508 0x00000000				;# OCTOSPI_TCR: SSHIFT=0, DCYC=0x0
	mmw 0xA0001400 0x00000001 0				;# OCTOSPI_CR: EN=1

	if { $qpi == 1 } {
		# Enter QPI mode
		mww 0xA0001100 0x00002001			;# OCTOSPI_CCR: DMODE=0x0, ABMODE=0x0, ADSIZE=0x2, ADMODE=0x0, ISIZE=0x0, IMODE=0x1
		mww 0xA0001110 0x00000038			;# OCTOSPI_IR: Enter QPI
		sleep 1

		# memory-mapped fast read mode with 3-byte addresses and 2 dummy cycles (for read only)
		mww 0xA0001000 0x30400049			;# OCTOSPI_CR: FMODE=0x3, APMS=1, FTHRES=0, FSEL=0, DQM=1, TCEN=1
		mww 0xA0001100 0x03002303			;# OCTOSPI_CCR: DMODE=0x3, ABMODE=0x0, ADSIZE=0x2, ADMODE=0x3, ISIZE=0x0, IMODE=0x3
		mww 0xA0001108 0x00000002			;# OCTOSPI_TCR: SSHIFT=0, DCYC=0x2
		mww 0xA0001110 0x0000000B			;# OCTOSPI_IR: FAST_READ

		mww 0xA0001500 0x00002001			;# OCTOSPI_CCR: DMODE=0x0, ABMODE=0x0, ADSIZE=0x2, ADMODE=0x0, ISIZE=0x0, IMODE=0x1
		mww 0xA0001510 0x00000038			;# OCTOSPI_IR: Enter QPI
		sleep 1

		# memory-mapped fast read mode with 3-byte addresses and 2 dummy cycles (for read only)
		mww 0xA0001400 0x30400049			;# OCTOSPI_CR: FMODE=0x3, APMS=1, FTHRES=0, FSEL=0, DQM=1, TCEN=1
		mww 0xA0001500 0x03002303			;# OCTOSPI_CCR: DMODE=0x3, ABMODE=0x0, ADSIZE=0x2, ADMODE=0x3, ISIZE=0x0, IMODE=0x3
		mww 0xA0001508 0x00000002			;# OCTOSPI_TCR: SSHIFT=0, DCYC=0x2
		mww 0xA0001510 0x0000000B			;# OCTOSPI_IR: FAST_READ

		# as OCTOSPI is set to instruction/address/data on 4 lines in memory mapped mode, driver will *always*
		# use this setting (i. e. for probe, erase, write)
		# the 'Enter QPI mode' command is chip specific, additionally both w25q128fv must be configured in advance by
		# programming the *NON*-volatile QE bit (bit 1 in status register 2), e. g. by the following commands
		#
		# stmqspi cmd $b 0 0x06
		# stmqspi cmd $b 0 0x31 0x02 0x02
		# stmqspi cmd $b 2 0x35
		#
		# the last one should return  '-> 02 02' to indicate successful setting of QE bit
		# furthermore, the flash chip changes its id from 0x1940ef to 0x1960ef upon entering QPI mode
	} else {
		# memory-mapped read mode with 3-byte addresses
		mww 0xA0001000 0x30400049				;# OCTOSPI_CR: FMODE=0x0, APMS=1, FTHRES=0, FSEL=0, DQM=1, TCEN=1
		mww 0xA0001100 0x01002101				;# OCTOSPI_CCR: DMODE=0x1, ABMODE=0x0, ADSIZE=0x2, ADMODE=0x1, ISIZE=0x0, IMODE=0x1
		mww 0xA0001110 0x00000003				;# OCTOSPI_IR: INSTR=READ

		# memory-mapped read mode with 3-byte addresses
		mww 0xA0001400 0x30400049				;# OCTOSPI_CR: FMODE=0x0, APMS=1, FTHRES=0, FSEL=0, DQM=1, TCEN=1
		mww 0xA0001500 0x01002101				;# OCTOSPI_CCR: DMODE=0x1, ABMODE=0x0, ADSIZE=0x2, ADMODE=0x1, ISIZE=0x0, IMODE=0x1
		mww 0xA0001510 0x00000003				;# OCTOSPI_IR: INSTR=READ
	}
}

$_TARGETNAME configure -event reset-init {
	global OCTOSPI1
	global OCTOSPI2

	mmw 0x40022000 0x00000005 0x0000000A	;# 5 WS for 108 MHz HCLK
	sleep 1
	mmw 0x40021000 0x00000100 0x00000000	;# HSI on
	mww 0x4002100C 0x01003632				;# RCC_PLLCFGR 108 MHz: PLLREN=1, PLLM=4, PLLN=54, PLLR=2, HSI
	mww 0x40021008 0x00008001				;# always HSI, APB1: /1, APB2: /1
	mmw 0x40021000 0x01000000 0x00000000	;# PLL on
	sleep 1
	mmw 0x40021008 0x00000003 0x00000000	;# switch to PLL
	sleep 1

	adapter_khz 4000

	if { $OCTOSPI2 } {
		octospi_init 1
	}
}

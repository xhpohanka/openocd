# This is an nucleo-f767zi with a single STM32H767ZIT6U chip.
# http://www.st.com/en/evaluation-tools/nucleo-f767zi.html
#
# Two Winbond W25Q256FV attached, dual-1-line or dual-4-line mode
#

# This is for using the onboard STLINK
source [find interface/stlink.cfg]

hla_vid_pid 0x0483 0x374f

transport select hla_swd

# increase working area to 256KB
set WORKAREASIZE 0x40000

# enable stmqspi
if {![info exists QUADSPI]} {
	set QUADSPI 1
}

source [find target/stm32f7x.cfg]

reset_config none

# QUADSPI initialization
# flash = 1: only flash1, = 2: only flash 2, anything else: both flash1 and flash2
# qpi: 4-line mode
proc qspi_init { flash qpi } {
	global a
	mmw 0x40023830 0x000007FF 0				;# RCC_AHB1ENR |= GPIOA-GPIOK (enable clocks)
	mmw 0x40023838 0x00000002 0				;# RCC_AHB3ENR |= QSPIEN (enable clock)
	sleep 1									;# Wait for clock startup

	# PB06: BK1_NCS, PB02: CLK, PD13: BK1_IO3, PE2: BK1_IO2, PD12: BK1_IO1, PD11: BK1_IO0
	# PC11: BK2_NCS, PB02: CLK, PG14: BK2_IO3, PG9: BK2_IO2, PE08: BK2_IO1, PE07: BK2_IO0

	# PB06:AF10:V, PB02:AF09:V, PC11:AF09:V, PD13:AF09:V, PD12:AF09:V, PD11:AF09:V,
	# PE07:AF10:V, PE02:AF09:V, PE08:AF10:V, PG14:AF09:V, PG09:AF09:V

	# Port B: PB06:AF10:V, PB02:AF09:V
	mmw 0x40020400 0x00002020 0x00001010	;# MODER
	mmw 0x40020408 0x00003030 0x00000000	;# OSPEEDR
	mmw 0x40020420 0x0A000900 0x05000600	;# AFRL

	# Port C: PC11:AF09:V
	mmw 0x40020800 0x00800000 0x00400000	;# MODER
	mmw 0x40020808 0x00C00000 0x00000000	;# OSPEEDR
	mmw 0x40020824 0x00009000 0x00006000	;# AFRH

	# Port D: PD13:AF09:V, PD12:AF09:V, PD11:AF09:V
	mmw 0x40020C00 0x0A800000 0x05400000	;# MODER
	mmw 0x40020C08 0x0FC00000 0x00000000	;# OSPEEDR
	mmw 0x40020C24 0x00999000 0x00666000	;# AFRH

	# Port E: PE08:AF10:V, PE07:AF10:V, PE02:AF09:V
	mmw 0x40021000 0x00028020 0x00014010	;# MODER
	mmw 0x40021008 0x0003C030 0x00000000	;# OSPEEDR
	mmw 0x40021020 0xA0000900 0x50000600	;# AFRL
	mmw 0x40021024 0x0000000A 0x00000005	;# AFRH

	# Port G: PG14:AF09:V, PG09:AF09:V
	mmw 0x40021800 0x20080000 0x10040000	;# MODER
	mmw 0x40021808 0x300C0000 0x00000000	;# OSPEEDR
	mmw 0x40021824 0x09000090 0x06000060	;# AFRH

	if { $flash == 1 } {
		# for flash 1 only w25q256fv
		mww 0xA0001000 0x05500018			;# QUADSPI_CR: PRESCALER=5, APMS=1, FTHRES=0, FSEL=0, DFM=0, SSHIFT=1, TCEN=1
		mww 0xA0001004 0x00180100			;# QUADSPI_DCR: FSIZE=0x18, CSHT=0x01, CKMODE=0
	} else {
		if { $flash == 2 } {
			# for flash 2 only w25q256fv
			mww 0xA0001000 0x05500098		;# QUADSPI_CR: PRESCALER=5, APMS=1, FTHRES=0, FSEL=1, DFM=0, SSHIFT=1, TCEN=1
			mww 0xA0001004 0x00180100		;# QUADSPI_DCR: FSIZE=0x18, CSHT=0x01, CKMODE=0
		} else {
			# for dual flash mode 2 * w25q256fv
			mww 0xA0001000 0x05500058		;# QUADSPI_CR: PRESCALER=5, APMS=1, FTHRES=0, FSEL=0, DFM=1, SSHIFT=1, TCEN=1
			mww 0xA0001004 0x00190100		;# QUADSPI_DCR: FSIZE=0x19, CSHT=0x01, CKMODE=0
		}
	}

	mww 0xA0001030 0x00001000				;# QUADSPI_LPTR: deactivate CS after 4096 clocks when FIFO is full
	mww 0xA0001014 0x0D002503				;# QUADSPI_CCR: FMODE=0x3, DMODE=0x1, DCYC=0x0, ADSIZE=0x3, ADMODE=0x1, IMODE=0x1
	mmw 0xA0001000 0x00000001 0				;# QUADSPI_CR: EN=1

	# Exit QPI mode
	mww 0xA0001014 0x000003FF				;# QUADSPI_CCR: FMODE=0x0, DMODE=0x0, DCYC=0x0, ADSIZE=0x0, ADMODE=0x0, IMODE=0x3, INSTR=Exit QPI
	sleep 1

	# Enter 4-byte mode
	mww 0xA0001014 0x000001B7				;# QUADSPI_CCR: FMODE=0x0, DMODE=0x0, DCYC=0x0, ADSIZE=0x0, ADMODE=0x0, IMODE=0x1, INSTR=Enter 4-byte
	sleep 1

	if { $qpi == 1 } {
		# Enter QPI mode
		mww 0xA0001014 0x00000138			;# QUADSPI_CCR: FMODE=0x0, DMODE=0x0, DCYC=0x0, ADSIZE=0x0, ADMODE=0x0, IMODE=0x1, INSTR=Enter QPI
		sleep 1

		# memory-mapped fast read mode with 4-byte addresses and 2 dummy cycles (for read only)
		mww 0xA0001014 0x0F083F0B			;# QUADSPI_CCR: FMODE=0x3, DMODE=0x3, DCYC=0x2, ADSIZE=0x3, ADMODE=0x3, IMODE=0x3, INSTR=Fast READ

		# as QSPI is set to instruction/address/data on 4 lines in memory mapped mode, driver will *always*
		# use this setting (i. e. for probe, erase, write)
		# the 'Enter QPI mode' command is chip specific, additionally both w25q256fv must be configured in advance by
		# programming the non-volatile QE bit (bit 1 in status register 2), e. g. by the following commands
		#
		# stmqspi cmd $a 0 0x06
		# stmqspi cmd $a 0 0x31 0x02 0x02
		# stmqspi cmd $a 2 0x35
		#
		# the last one should return  '-> 02 02' to indicate successful setting of QE bit
		# furthemore, the flash chip changes its id from 0x1940ef to 0x1960ef upon entering QPI mode
	} else {
		# memory-mapped read mode with 4-byte addresses
		mww 0xA0001014 0x0D003503			;# QUADSPI_CCR: FMODE=0x3, DMODE=0x1, DCYC=0x0, ADSIZE=0x3, ADMODE=0x1, IMODE=0x1, INSTR=READ
	}
}

$_TARGETNAME configure -event reset-init {
	global QUADSPI

	mww 0x40023C00 0x00000006				;# 6 WS for 192 MHz HCLK
	sleep 1
	mww 0x40023804 0x24003008				;# 192 MHz: PLLM=8, PLLN=192, PLLP=2
	mww 0x40023808 0x00009400				;# APB1: /4, APB2: /2
	mmw 0x40023800 0x01000000 0x00000000	;# PLL on
	sleep 1
	mmw 0x40023808 0x00000002 0x00000000	;# switch to PLL
	sleep 1

	adapter_khz 24000

	if { $QUADSPI } {
		qspi_init 0 1
	}
}
